{"version":3,"file":"index.4c53f0cc.js","sources":["../../vite/modulepreload-polyfill","../../preact/jsx-runtime","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import * as jsxRuntime from \"/home/runner/work/chengyu-wordle/chengyu-wordle/node_modules/preact/jsx-runtime/dist/jsxRuntime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { useState, useEffect, useMemo } from 'preact/hooks';\nimport pinyin from 'pinyin';\nconst py = (str) =>\n  pinyin(str, { segment: true, group: true }).flat().join(' ').trim();\n\n// Data\nimport idiomsTxt from '../game-data/all-idioms.txt?raw';\nconst idioms = idiomsTxt.split('\\n');\nimport gameIdioms from '../game-data/game-idioms.csv';\nconst games = gameIdioms.slice(1).map((row) => ({\n  id: row[0],\n  idiom: row[1],\n}));\n\nconst MAX_LETTERS = 4;\nconst MAX_KEYS = 20;\nconst MAX_STEPS = 6;\n\nwindow.clearGames = () => {\n  // loop all keys in localStorage, if the key starts with 'cywd-', delete it\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key.startsWith('cywd-')) {\n      localStorage.removeItem(key);\n    }\n  }\n};\n\nwindow.allGames = () => {\n  const allGames = new Map();\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key.startsWith('cywd-')) {\n      const game = JSON.parse(localStorage.getItem(key));\n      allGames.set(key.replace('cywd-', ''), game);\n    }\n  }\n  return allGames;\n};\n\nconst getBoardGameState = (board) => {\n  const reversedBoard = [...board].reverse();\n  const lastRowsWithValuesIndex = reversedBoard.findIndex((row) =>\n    row.some((item) => item.v)\n  );\n  const lastRowWithValues = reversedBoard[lastRowsWithValuesIndex];\n  if (lastRowWithValues) {\n    const won = lastRowWithValues.every((item) => item.s === 'correct');\n    if (won) return 'won';\n    const rowHasStates = lastRowWithValues.every((item) => !!item.s);\n    // Since board is reversed, index 0 = last row\n    if (lastRowsWithValuesIndex === 0 && !won && rowHasStates) {\n      return 'lost';\n    }\n  }\n  return null;\n};\n\nconst blankBoard = () =>\n  Array.from({ length: MAX_STEPS }, () =>\n    Array.from({ length: MAX_LETTERS }, () => ({ v: '', s: null }))\n  );\n\nconst getIdiomsKeys = (idiom, prevPassedIdioms, prevKeys, depth = 0) => {\n  let passedIdioms = prevPassedIdioms || new Set();\n  passedIdioms.add(idiom);\n  let keys = prevKeys || new Set();\n  const idiomLetters = idiom.split('');\n  idiomLetters.forEach((letter) => keys.add(letter));\n  let consecutiveFailures = 0;\n  lettersCycle: for (let i = 0; i < games.length; i++) {\n    const letter = idiomLetters[(i + 1) % MAX_LETTERS];\n    const anotherIdiom = games.find(\n      ({ idiom }) => !passedIdioms.has(idiom) && idiom.includes(letter)\n    );\n    if (anotherIdiom) {\n      for (let j = 0; j < anotherIdiom.idiom.length; j++) {\n        keys.add(anotherIdiom.idiom[j]);\n\n        if (keys.size >= MAX_KEYS) {\n          break lettersCycle;\n        }\n      }\n      passedIdioms.add(anotherIdiom.idiom);\n      consecutiveFailures = 0;\n    } else {\n      if (consecutiveFailures >= MAX_LETTERS + 1) {\n        // Too many failures, stop\n        break lettersCycle;\n      }\n      consecutiveFailures += 1;\n    }\n  }\n\n  // DEBUG\n  if (keys.size < MAX_KEYS || passedIdioms.size < MAX_STEPS) {\n    const nextIdiom = [...passedIdioms][++depth];\n    if (nextIdiom) {\n      const { passedIdioms: _passedIdioms, keys: _keys } = getIdiomsKeys(\n        nextIdiom,\n        passedIdioms,\n        keys,\n        depth\n      );\n      passedIdioms = _passedIdioms;\n      keys = _keys;\n    }\n  }\n\n  // Still not enough keys?\n  if (keys.size < MAX_KEYS || passedIdioms.size < MAX_STEPS) {\n    const randomIdiom = games[Math.floor(Math.random() * games.length)].idiom;\n    if (randomIdiom) {\n      const { passedIdioms: _passedIdioms, keys: _keys } = getIdiomsKeys(\n        randomIdiom,\n        passedIdioms,\n        keys,\n        0\n      );\n      passedIdioms = _passedIdioms;\n      keys = _keys;\n    }\n  }\n\n  if (keys.size < MAX_KEYS || passedIdioms.size < MAX_STEPS) {\n    const gameID = games.find((g) => g.idiom === idiom)?.id;\n    console.log(gameID, {\n      possibleIdioms: passedIdioms.size,\n      keySize: keys.size,\n      consecutiveFailures,\n    });\n  }\n\n  return {\n    passedIdioms,\n    keys,\n  };\n};\n\n// Check if all idioms have enough keys/idioms\n// games.forEach((game) => {\n//   getIdiomsKeys(game.idiom);\n// });\n\nconst PlayIcon = (props) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" {...props}>\n    <title>‚ñ∂Ô∏è</title>\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\n      clip-rule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst CloseIcon = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <title>‚úñÔ∏è</title>\n    <path\n      fill=\"currentColor\"\n      d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n    ></path>\n  </svg>\n);\n\nexport function App() {\n  const [currentGame, setCurrentGame] = useState(\n    games.find((g) => g.id === location.hash.slice(1)) || games[0]\n  );\n  useEffect(() => {\n    window.addEventListener('hashchange', () => {\n      setCurrentGame(\n        games.find((g) => g.id === location.hash.slice(1)) || games[0]\n      );\n    });\n  }, []);\n\n  // v = value, s = state\n  // States (default \"null\"):\n  // - correct: letter is in the idiom adnd in the correct spot (green)\n  // - present: letter is in the idiom but in the wrong spot (yellow)\n  // - absent: letter is NOT in the idiom in any spot (gray)\n  const [board, setBoard] = useState(\n    JSON.parse(localStorage.getItem(`cywd-${currentGame.id}`))?.board ||\n      blankBoard()\n  );\n  useEffect(() => {\n    const cachedGame = localStorage.getItem(`cywd-${currentGame.id}`);\n    if (cachedGame) {\n      setBoard(JSON.parse(cachedGame).board);\n    } else {\n      setBoard(blankBoard());\n    }\n  }, [currentGame.id]);\n\n  // Save to localStorage every time board changes\n  useEffect(() => {\n    // Only store in localStorage if board has some values\n    if (board && board.some((row) => row.some((cell) => cell.v))) {\n      localStorage.setItem(\n        `cywd-${currentGame.id}`,\n        JSON.stringify({\n          board,\n          gameState: getBoardGameState(board),\n        })\n      );\n    }\n  }, [board]);\n\n  // const [currentStep, setCurrentStep] = useState(0);\n  const currentStep =\n    board?.findIndex((row) => row.some((cell) => !cell.s)) || 0;\n  // console.log({ currentStep, board });\n\n  // Set current step to first empty item in board\n  const [showError, setShowError] = useState(false);\n  const [showModal, setShowModal] = useState(false); // false | won | lost\n  const [showInfoModal, setShowInfoModal] = useState(false);\n\n  // const passedIdioms = [currentGame.idiom];\n  const currentGameKeys = useMemo(() => {\n    const { passedIdioms, keys } = getIdiomsKeys(currentGame.idiom);\n\n    // SPOILER inside console.log!\n    const possibleIdioms = [...passedIdioms]\n      .map((idiom) => {\n        return `${idiom} (${py(idiom)})`;\n      })\n      .sort((a, b) => a.localeCompare(b, 'zh'));\n    console.log(`POSSIBLE IDOMS [${currentGame.id}] (${keys.size} keys):\n${possibleIdioms.map((idiom, i) => `${i + 1}. ${idiom}`).join('\\n')}\n\nüö®SPOILERüö® Type 'ANSWER' to see the answer.\n`);\n    window.ANSWER = `${currentGame.idiom} (${py(currentGame.idiom)})`;\n\n    return [...keys].sort((a, b) => a.localeCompare(b, 'zh'));\n  }, [currentGame.idiom]);\n\n  const handleLetter = (letter, overwrite = false) => {\n    if (!board[currentStep]) return;\n    if (gameState) return;\n    const newBoard = [...board];\n    let columnIndex = newBoard[currentStep].findIndex((item) => item.v === '');\n    if (overwrite) {\n      if (columnIndex === -1) {\n        columnIndex = 3;\n      } else {\n        columnIndex--;\n      }\n    }\n    const column = newBoard[currentStep][columnIndex];\n    if (column) {\n      column.v = letter;\n      setBoard(newBoard);\n    }\n  };\n\n  const flatBoard = board.flat();\n  const correctKeys = [];\n  const presentKeys = [];\n  const absentKeys = [];\n  flatBoard.forEach((item) => {\n    if (item.s === 'correct') {\n      correctKeys.push(item.v);\n    } else if (item.s === 'present') {\n      presentKeys.push(item.v);\n    } else if (item.s === 'absent') {\n      absentKeys.push(item.v);\n    }\n  });\n\n  const handleEnter = () => {\n    if (gameState) return;\n    console.log('handleEnter');\n    setShowError(false);\n\n    // if (currentStep === MAX_STEPS - 1 || !board[currentStep]) {\n    //   renderModal();\n    //   return;\n    // }\n\n    const currentIdiom = board[currentStep].map((item) => item.v).join('');\n    const valid = idioms.includes(currentIdiom);\n    if (valid) {\n      board[currentStep].forEach((item, i) => {\n        if (currentGame.idiom[i] === item.v) {\n          item.s = 'correct';\n        } else if (currentGame.idiom.split('').includes(item.v)) {\n          item.s = 'present';\n        } else {\n          item.s = 'absent';\n        }\n      });\n      setBoard([...board]);\n\n      // Go next step\n      // setCurrentStep(currentStep + 1);\n    } else {\n      setTimeout(() => {\n        setShowError(true);\n      }, 10);\n    }\n    console.log({ currentIdiom, valid });\n  };\n\n  const gameState = useMemo(() => {\n    return getBoardGameState(board);\n  }, [board]);\n\n  useEffect(() => {\n    if (gameState === 'won') {\n      setShowModal('won');\n    } else if (gameState === 'lost') {\n      setShowModal('lost');\n    } else {\n      setShowModal(false);\n    }\n  }, [gameState]);\n\n  const handleBackspace = () => {\n    if (gameState) return;\n    const newBoard = [...board];\n    // Get last column with value\n    if (!newBoard[currentStep]) return;\n    const column = [...newBoard[currentStep]]\n      .reverse()\n      .find((item) => item.v !== '' && item.s === null);\n    if (column) {\n      column.v = '';\n      setBoard(newBoard);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', (e) => {\n      // Enter\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    const handleKey = (e) => {\n      if (gameState) return;\n      if (e.metaKey || e.ctrlKey || !e.key) {\n        return;\n      }\n      const key = e.key.toLowerCase();\n      if (key === 'enter') {\n        e.preventDefault();\n        e.stopPropagation();\n        handleEnter();\n      } else if (key === 'backspace') {\n        e.preventDefault();\n        handleBackspace();\n      } else if (/^arrow(left|right)/i.test(key)) {\n        // This will cycle through all letters with same starting pinyin letter\n        const lastColumnWithValue = [...board[currentStep]]\n          .reverse()\n          .find((item) => item.v !== '');\n        const value = lastColumnWithValue?.v;\n        if (value) {\n          const pinyinLetter = py(value)[0];\n          const possibleLetters = currentGameKeys.filter(\n            (k) => py(k)[0] === pinyinLetter\n          );\n          if (possibleLetters.length <= 1) return;\n          const letterIndex = possibleLetters.indexOf(value);\n          const nextLetter =\n            key === 'arrowright'\n              ? possibleLetters[(letterIndex + 1) % possibleLetters.length]\n              : possibleLetters[\n                  (letterIndex + possibleLetters.length - 1) %\n                    possibleLetters.length\n                ];\n          if (nextLetter) {\n            handleLetter(nextLetter, true);\n          }\n        }\n      } else {\n        // Type \"a\" will trigger the first letter pinyin that starts with \"ƒÅ\"\n        const letter = currentGameKeys.find((k) => {\n          const firstPinyinChar = py(k)[0];\n          return (\n            firstPinyinChar.localeCompare(key, 'en', {\n              sensitivity: 'base',\n            }) === 0\n          );\n        });\n        if (letter) {\n          e.preventDefault();\n          handleLetter(letter);\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKey);\n    return () => {\n      document.removeEventListener('keydown', handleKey);\n    };\n  }, [currentGameKeys, currentStep, gameState]);\n\n  const permalink = location.origin + location.pathname + '#' + currentGame.id;\n  const emojiResults = board\n    .map((rows) =>\n      rows.some((item) => !!item.v)\n        ? `\\n${rows\n            .map(\n              ({ s }) =>\n                ({\n                  correct: 'üü©',\n                  present: 'üü®',\n                  absent: '‚¨ú',\n                }[s])\n            )\n            .join('')}`\n        : ''\n    )\n    .join('')\n    .trim();\n  const attempts = gameState === 'won' ? emojiResults.split('\\n').length : 'X';\n  const shareText = `Chengyu Wordle [${currentGame.id}] ${attempts}/6\\n\\n${emojiResults}\\n\\n${permalink}`;\n\n  return (\n    <>\n      <header>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setShowInfoModal(true);\n          }}\n        >\n          <svg\n            width=\"16\"\n            height=\"16\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <title>‚ÑπÔ∏è</title>\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n          </svg>\n        </button>\n        {/* <a href=\"https://github.com/cheeaun/chengyu-wordle\" target=\"_blank\">\n          Source\n        </a> */}\n        <h1>\n          Chengyu Wordle <sup>beta</sup>\n        </h1>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setShowModal(gameState || 'play');\n          }}\n        >\n          Play\n        </button>\n      </header>\n      <div id=\"board\">\n        {board.map((letters, index) => {\n          return (\n            <div\n              className={`row ${\n                currentStep === index && showError ? 'error' : ''\n              } ${currentStep === index ? 'current' : ''}`}\n              key={index}\n            >\n              {letters.map((letter, i) => (\n                <div\n                  className={`letter ${letter.v ? 'lettered' : ''} ${\n                    letter.s ?? ''\n                  }`}\n                  key={i}\n                >\n                  <ruby>\n                    {letter.v || <span style={{ opacity: 0 }}>‰∏Ä</span>}\n                    <rp>(</rp>\n                    <rt>{py(letter.v) || <>&nbsp;</>}</rt>\n                    <rp>)</rp>\n                  </ruby>\n                </div>\n              ))}\n            </div>\n          );\n        })}\n      </div>\n      <div id=\"keyboard\">\n        <div class=\"inner\">\n          <div class=\"keys\">\n            {currentGameKeys.map((key, i) => (\n              <button\n                class={`${correctKeys.includes(key) ? 'correct' : ''} ${\n                  presentKeys.includes(key) ? 'present' : ''\n                } ${absentKeys.includes(key) ? 'absent' : ''}`}\n                type=\"button\"\n                tabIndex={-1}\n                onClick={() => {\n                  handleLetter(key);\n                }}\n              >\n                <ruby>\n                  {key}\n                  <rp>(</rp>\n                  <rt>{py(key)}</rt>\n                  <rp>)</rp>\n                </ruby>\n              </button>\n            ))}\n          </div>\n          <div class=\"row\">\n            <button type=\"button\" onClick={handleEnter} tabIndex={-1}>\n              Enter\n            </button>\n            <button type=\"button\" onClick={handleBackspace} tabIndex={-1}>\n              <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n                <path d=\"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H7.07L2.4 12l4.66-7H22v14zm-11.59-2L14 13.41 17.59 17 19 15.59 15.41 12 19 8.41 17.59 7 14 10.59 10.41 7 9 8.41 12.59 12 9 15.59z\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div\n        id=\"modal\"\n        class={showModal ? 'appear' : ''}\n        onClick={(e) => {\n          if (e.target === e.currentTarget) setShowModal(null);\n        }}\n      >\n        <CloseIcon\n          height=\"24\"\n          width=\"24\"\n          class=\"close\"\n          onClick={() => {\n            setShowModal(null);\n          }}\n        />\n        <div class=\"content\">\n          <h2>\n            {showModal === 'won'\n              ? 'üéâüéâüéâ'\n              : showModal === 'lost'\n              ? 'üò≠üò≠üò≠'\n              : 'üëæüëæüëæ'}\n          </h2>\n          {showModal === 'play' && (\n            <a href={permalink}>üîó {location.host + '/#' + currentGame.id}</a>\n          )}\n          {/(won|lost)/i.test(showModal) && (\n            <>\n              <p>\n                <b class=\"answer\">\n                  <ruby>\n                    {currentGame.idiom}\n                    <rp>(</rp>\n                    <rt>{py(currentGame.idiom)}</rt>\n                    <rp>)</rp>\n                  </ruby>\n                </b>\n                <br />{' '}\n                <small>\n                  <a href={permalink}>üîó {currentGame.id}</a>\n                  &nbsp;&nbsp;\n                  <a\n                    href={`https://cc-cedict.org/editor/editor.php?handler=QueryDictionary&querydictionary_search=${currentGame.idiom}`}\n                    target=\"_blank\"\n                  >\n                    üìñ CC-CEDICT\n                  </a>\n                </small>\n              </p>\n              <div class=\"results\">{shareText}</div>\n              <button\n                id=\"share\"\n                onClick={async () => {\n                  try {\n                    await navigator.share({ text: shareText });\n                  } catch (e) {\n                    try {\n                      await navigator.clipboard.writeText(shareText);\n                      alert('Copied results to clipboard');\n                    } catch (e2) {}\n                  }\n                }}\n              >\n                Share{' '}\n                <svg height=\"16\" width=\"16\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92c0-1.61-1.31-2.92-2.92-2.92zM18 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM6 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 7.02c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"\n                  ></path>\n                </svg>\n              </button>\n            </>\n          )}\n          <p>\n            <button\n              type=\"button\"\n              onClick={() => {\n                const yes = confirm(\n                  'Are you sure you want to start a new random game?'\n                );\n                if (yes) {\n                  const rand = Math.round(Math.random() * (games.length - 1));\n                  const randGame = games[rand];\n                  location.hash = `#${randGame.id}`;\n                  setShowModal(null);\n                }\n              }}\n            >\n              <PlayIcon width={20} height={20} /> Random\n            </button>{' '}\n            <button\n              type=\"button\"\n              onClick={() => {\n                // Ask user for idiom ID, load game if ID is valid\n                const id = prompt('Enter idiom ID:');\n                if (id) {\n                  const game = games.find((g) => g.id === id);\n                  if (game) {\n                    location.hash = `#${game.id}`;\n                    setShowModal(null);\n                  } else {\n                    alert('Invalid idiom ID');\n                  }\n                }\n              }}\n            >\n              <PlayIcon width={20} height={20} /> Choose\n            </button>\n          </p>\n        </div>\n      </div>\n      <div id=\"info-modal\" class={showInfoModal ? 'appear' : ''}>\n        <CloseIcon\n          height=\"24\"\n          width=\"24\"\n          class=\"close\"\n          onClick={() => {\n            setShowInfoModal(false);\n          }}\n        />\n        <div class=\"content\">\n          <h2>How to play</h2>\n          <p>Guess the idiom in 6 tries.</p>\n          <p>\n            Each guess must be a valid 4-letter idiom. Hit the enter button to\n            submit.\n          </p>\n          <p>\n            After each guess, the color of the tiles will change to show how\n            close your guess was to the idiom.\n          </p>\n          <ul>\n            <li>üü©‚¨ú‚¨ú‚¨ú Green = correct spot</li>\n            <li>‚¨úüü®‚¨ú‚¨ú Yellow = wrong spot</li>\n            <li>\n              ‚¨ú‚¨ú<span style={{ opacity: 0.5 }}>‚¨õ</span>‚¨ú Gray = not in any\n              spot\n            </li>\n          </ul>\n          <h2>About</h2>\n          <p>\n            <a\n              href=\"https://github.com/cheeaun/chengyu-wordle/\"\n              target=\"_blank\"\n            >\n              Built\n            </a>{' '}\n            by{' '}\n            <a href=\"https://cheeaun.com\" target=\"_blank\">\n              Chee Aun\n            </a>\n            .{' '}\n            <a href=\"https://www.powerlanguage.co.uk/wordle/\" target=\"_blank\">\n              Wordle\n            </a>{' '}\n            ¬©Ô∏è{' '}\n            <a href=\"https://powerlanguage.co.uk/\" target=\"_blank\">\n              Josh Wardle\n            </a>\n            .\n          </p>\n          <h2>Feedback channels</h2>\n          <ul>\n            <li>\n              <a href=\"https://t.me/+ykuhfiImLd1kNjk1\" target=\"_blank\">\n                Telegram group\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/cheeaun/chengyu-wordle/discussions\"\n                target=\"_blank\"\n              >\n                GitHub Discussions\n              </a>\n              (for developers)\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/cheeaun/chengyu-wordle/issues\"\n                target=\"_blank\"\n              >\n                GitHub Issues\n              </a>{' '}\n              (for bugs)\n            </li>\n            <li>\n              <a href=\"https://twitter.com/cheeaun\" target=\"_blank\">\n                @cheeaun on Twitter\n              </a>\n            </li>\n            <li>\n              <a href=\"https://t.me/cheeaun\" target=\"_blank\">\n                @cheeaun on Telegram\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { render } from 'preact'\nimport { App } from './app'\nimport './index.css'\n\nrender(<App />, document.getElementById('app'))\n"],"names":["jsxRuntime.jsx","jsxRuntime.jsxs","jsxRuntime.Fragment","py","str","pinyin","segment","group","flat","join","trim","idioms","idiomsTxt","split","games","gameIdioms","slice","map","row","id","idiom","MAX_LETTERS","MAX_KEYS","MAX_STEPS","window","clearGames","i","localStorage","length","key","startsWith","removeItem","allGames","Map","game","JSON","parse","getItem","set","replace","getBoardGameState","board","reversedBoard","reverse","lastRowsWithValuesIndex","findIndex","some","item","v","lastRowWithValues","won","every","s","rowHasStates","blankBoard","Array","from","getIdiomsKeys","prevPassedIdioms","prevKeys","depth","passedIdioms","Set","add","keys","idiomLetters","forEach","letter","consecutiveFailures","anotherIdiom","find","has","includes","j","size","nextIdiom","_passedIdioms","_keys","randomIdiom","Math","floor","random","gameID","g","log","possibleIdioms","keySize","PlayIcon","props","_jsxs","_jsx","CloseIcon","currentGame","setCurrentGame","useState","location","hash","addEventListener","setBoard","cachedGame","cell","setItem","stringify","gameState","currentStep","showError","setShowError","showModal","setShowModal","showInfoModal","setShowInfoModal","currentGameKeys","useMemo","sort","a","b","localeCompare","ANSWER","handleLetter","overwrite","newBoard","columnIndex","column","flatBoard","correctKeys","presentKeys","absentKeys","push","handleEnter","currentIdiom","valid","handleBackspace","e","preventDefault","stopPropagation","handleKey","metaKey","ctrlKey","toLowerCase","test","lastColumnWithValue","value","pinyinLetter","possibleLetters","filter","k","letterIndex","indexOf","nextLetter","firstPinyinChar","sensitivity","removeEventListener","permalink","origin","pathname","emojiResults","rows","correct","present","absent","attempts","shareText","letters","index","opacity","target","currentTarget","host","navigator","share","text","clipboard","writeText","confirm","rand","round","randGame","prompt","render","document","getElementById"],"mappings":"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"}