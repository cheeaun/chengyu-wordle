{"version":3,"file":"index.2953896b.js","sources":["../../vite/modulepreload-polyfill","../../preact/jsx-runtime","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import * as jsxRuntime from \"/home/runner/work/chengyu-wordle/chengyu-wordle/node_modules/preact/jsx-runtime/dist/jsxRuntime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { useState, useEffect, useMemo } from 'preact/hooks';\nimport pinyin from 'pinyin';\nconst py = (str) =>\n  pinyin(str, { segment: true, group: true }).flat().join(' ').trim();\n\n// Data\nimport idiomsTxt from '../game-data/all-idioms.txt?raw';\nconst idioms = idiomsTxt.split('\\n');\nimport gameIdioms from '../game-data/game-idioms.csv';\nconst games = gameIdioms.slice(1).map((row) => ({\n  id: row[0],\n  idiom: row[1],\n}));\n\nconst MAX_LETTERS = 4;\nconst MAX_KEYS = 20;\nconst MAX_STEPS = 6;\nconst KEY_PREFIX = 'cywd-';\n\nwindow.clearGames = () => {\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key.startsWith(KEY_PREFIX)) {\n      localStorage.removeItem(key);\n    }\n  }\n};\n\nwindow.allGames = () => {\n  const allGames = new Map();\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key.startsWith(KEY_PREFIX)) {\n      const game = JSON.parse(localStorage.getItem(key));\n      allGames.set(key.replace(KEY_PREFIX, ''), game);\n    }\n  }\n  return allGames;\n};\n\nconst getIdiomStates = (hiddenIdiom, testIdiom) => {\n  const letters1 =\n    typeof testIdiom === 'string' ? testIdiom.split('') : testIdiom;\n  const letters2 =\n    typeof hiddenIdiom === 'string' ? hiddenIdiom.split('') : hiddenIdiom;\n  const lettersLength = letters1.length;\n  const states = Array.from({ length: lettersLength }, () => '‚¨ú');\n  if (lettersLength !== letters2.length) {\n    throw new Error('idioms must have the same length');\n  }\n  const correctLetterIndices = [];\n  for (let i = 0; i < lettersLength; i++) {\n    const l1 = letters1[i];\n    const l2 = letters2[i];\n    if (l1 === l2) {\n      states[i] = 'üü©';\n      correctLetterIndices.push(i);\n    }\n  }\n  const presentLetterIndices = [];\n  for (let i = 0; i < lettersLength; i++) {\n    const l1 = letters1[i];\n    const l2 = letters2[i];\n    if (l1 !== l2) {\n      const l1Index = letters2.indexOf(l1);\n      if (\n        l1Index !== -1 &&\n        !correctLetterIndices.includes(l1Index) &&\n        !presentLetterIndices.includes(l1Index)\n      ) {\n        states[i] = 'üüß';\n        presentLetterIndices.push(l1Index);\n      }\n    }\n  }\n  return states;\n};\n\nwindow.getIdiomStates = getIdiomStates;\n\nconst getBoardGameState = (boardStates) => {\n  const won = boardStates.some(\n    (row) => !!row.length && row.every((s) => s === 'üü©')\n  );\n  if (won) return 'won';\n  const lastRow = boardStates[boardStates.length - 1];\n  const lost = !!lastRow.length && lastRow.every((s) => s !== 'üü©');\n  if (lost) return 'lost';\n  return null;\n};\n\n// v = letter values of the row\n// s = submitted state of the row (after user press enter)\nconst blankBoard = () =>\n  Array.from({ length: MAX_STEPS }, () => ({\n    v: Array.from({ length: MAX_LETTERS }, () => ''),\n    s: false,\n  }));\n\nconst getIdiomsKeys = (idiom, prevPassedIdioms, prevKeys, depth = 0) => {\n  let passedIdioms = prevPassedIdioms || new Set();\n  passedIdioms.add(idiom);\n  let keys = prevKeys || new Set();\n  const idiomLetters = idiom.split('');\n  idiomLetters.forEach((letter) => keys.add(letter));\n  let consecutiveFailures = 0;\n  lettersCycle: for (let i = 0; i < games.length; i++) {\n    const letter = idiomLetters[(i + 1) % MAX_LETTERS];\n    const anotherIdiom = games.find(\n      ({ idiom }) => !passedIdioms.has(idiom) && idiom.includes(letter)\n    );\n    if (anotherIdiom) {\n      for (let j = 0; j < anotherIdiom.idiom.length; j++) {\n        keys.add(anotherIdiom.idiom[j]);\n\n        if (keys.size >= MAX_KEYS) {\n          break lettersCycle;\n        }\n      }\n      passedIdioms.add(anotherIdiom.idiom);\n      consecutiveFailures = 0;\n    } else {\n      if (consecutiveFailures >= MAX_LETTERS + 1) {\n        // Too many failures, stop\n        break lettersCycle;\n      }\n      consecutiveFailures += 1;\n    }\n  }\n\n  // Try the next idiom\n  if (keys.size < MAX_KEYS || passedIdioms.size < MAX_STEPS) {\n    const nextIdiom = [...passedIdioms][++depth];\n    if (nextIdiom) {\n      const { passedIdioms: _passedIdioms, keys: _keys } = getIdiomsKeys(\n        nextIdiom,\n        passedIdioms,\n        keys,\n        depth\n      );\n      passedIdioms = _passedIdioms;\n      keys = _keys;\n    }\n  }\n\n  // Still not enough keys, choose a random idiom\n  if (keys.size < MAX_KEYS || passedIdioms.size < MAX_STEPS) {\n    const randomIdiom = games[Math.floor(Math.random() * games.length)].idiom;\n    if (randomIdiom) {\n      const { passedIdioms: _passedIdioms, keys: _keys } = getIdiomsKeys(\n        randomIdiom,\n        passedIdioms,\n        keys,\n        0\n      );\n      passedIdioms = _passedIdioms;\n      keys = _keys;\n    }\n  }\n\n  // Something very wrong happened\n  if (keys.size < MAX_KEYS || passedIdioms.size < MAX_STEPS) {\n    const gameID = games.find((g) => g.idiom === idiom)?.id;\n    console.error(gameID, {\n      possibleIdioms: passedIdioms.size,\n      keySize: keys.size,\n      consecutiveFailures,\n    });\n  }\n\n  return {\n    passedIdioms,\n    keys,\n  };\n};\n\n// Check if all idioms have enough keys/idioms\n// games.forEach((game) => {\n//   getIdiomsKeys(game.idiom);\n// });\n\nconst PlayIcon = (props) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" {...props}>\n    <title>‚ñ∂Ô∏è</title>\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\"\n      clip-rule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst CloseIcon = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <title>‚úñÔ∏è</title>\n    <path\n      fill=\"currentColor\"\n      d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n    ></path>\n  </svg>\n);\n\nexport function App() {\n  const [currentGame, setCurrentGame] = useState(\n    games.find((g) => g.id === location.hash.slice(1)) || games[0]\n  );\n  useEffect(() => {\n    window.addEventListener('hashchange', () => {\n      setCurrentGame(\n        games.find((g) => g.id === location.hash.slice(1)) || games[0]\n      );\n    });\n  }, []);\n\n  const [board, setBoard] = useState(\n    JSON.parse(localStorage.getItem(`${KEY_PREFIX}${currentGame.id}`))?.board ||\n      blankBoard()\n  );\n  useEffect(() => {\n    const cachedGame = localStorage.getItem(`${KEY_PREFIX}${currentGame.id}`);\n    if (cachedGame) {\n      setBoard(JSON.parse(cachedGame).board);\n    } else {\n      setBoard(blankBoard());\n    }\n  }, [currentGame.id]);\n\n  const boardStates = useMemo(() => {\n    return board.map((row, i) => {\n      if (row.s) {\n        return getIdiomStates(currentGame.idiom, row.v);\n      }\n      return [];\n    });\n  }, [board]);\n\n  // Save to localStorage every time board changes\n  useEffect(() => {\n    // Only store in localStorage if board has some values\n    if (board && board.some((row) => row.v.some((v) => v))) {\n      localStorage.setItem(\n        `${KEY_PREFIX}${currentGame.id}`,\n        JSON.stringify({\n          board,\n          gameState: getBoardGameState(boardStates),\n        })\n      );\n    }\n  }, [boardStates]);\n\n  const currentStep = board?.findIndex((row) => row.s === false) || 0;\n\n  // Set current step to first empty item in board\n  const [showError, setShowError] = useState(false);\n  const [showModal, setShowModal] = useState(false); // false | won | lost\n  const [showInfoModal, setShowInfoModal] = useState(false);\n\n  const currentGameKeys = useMemo(() => {\n    const { passedIdioms, keys } = getIdiomsKeys(currentGame.idiom);\n\n    // SPOILER inside console.log!\n    const possibleIdioms = [...passedIdioms]\n      .map((idiom) => {\n        return `${idiom} (${py(idiom)})`;\n      })\n      .sort((a, b) => a.localeCompare(b, 'zh'));\n    console.log(`POSSIBLE IDOMS [${currentGame.id}] (${keys.size} keys):\n${possibleIdioms.map((idiom, i) => `${i + 1}. ${idiom}`).join('\\n')}\n\nüö®SPOILERüö® Type 'ANSWER' to see the answer.\n`);\n    window.ANSWER = `${currentGame.idiom} (${py(currentGame.idiom)})`;\n\n    return [...keys].sort((a, b) => a.localeCompare(b, 'zh'));\n  }, [currentGame.idiom]);\n\n  const handleLetter = (letter, overwrite = false) => {\n    if (!board[currentStep]) return;\n    if (gameState) return;\n    const newBoard = [...board];\n    let columnIndex = newBoard[currentStep].v.findIndex((v) => v === '');\n    if (overwrite) {\n      if (columnIndex === -1) {\n        columnIndex = 3;\n      } else {\n        columnIndex--;\n      }\n    }\n    if (columnIndex !== -1) {\n      newBoard[currentStep].v[columnIndex] = letter;\n      setBoard(newBoard);\n    }\n  };\n\n  const correctKeys = new Set();\n  const presentKeys = new Set();\n  const absentKeys = new Set();\n  board.forEach((row, i) => {\n    if (!row.s) return;\n    row.v.forEach((letter, j) => {\n      const state = boardStates[i][j];\n      if (state === 'üü©') {\n        correctKeys.add(letter);\n      } else if (state === 'üüß') {\n        presentKeys.add(letter);\n      } else if (state === '‚¨ú') {\n        absentKeys.add(letter);\n      }\n    });\n  });\n\n  const handleEnter = () => {\n    if (gameState) return;\n    console.log('handleEnter');\n    setShowError(false);\n\n    const row = board[currentStep];\n    const currentIdiom = row.v.join('');\n    const valid = idioms.includes(currentIdiom);\n    if (valid) {\n      row.s = true;\n      setBoard([...board]);\n    } else {\n      setTimeout(() => {\n        setShowError(true);\n      }, 10);\n    }\n    console.log({ currentIdiom, valid });\n  };\n\n  const gameState = useMemo(() => {\n    return getBoardGameState(boardStates);\n  }, [boardStates]);\n\n  useEffect(() => {\n    if (gameState === 'won') {\n      setShowModal('won');\n    } else if (gameState === 'lost') {\n      setShowModal('lost');\n    } else {\n      setShowModal(false);\n    }\n  }, [gameState]);\n\n  const handleBackspace = () => {\n    if (gameState) return;\n    const newBoard = [...board];\n    // Get last column with value\n    const row = newBoard[currentStep];\n    if (!row || row.s) return;\n    let columnIndex = -1;\n    for (let i = row.v.length - 1; i >= 0; i--) {\n      if (row.v[i] !== '') {\n        columnIndex = i;\n        break;\n      }\n    }\n    if (columnIndex !== -1) {\n      row.v[columnIndex] = '';\n      setBoard(newBoard);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', (e) => {\n      // Enter\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    const handleKey = (e) => {\n      if (gameState) return;\n      if (e.metaKey || e.ctrlKey || !e.key) {\n        return;\n      }\n      const key = e.key.toLowerCase();\n      if (key === 'enter') {\n        e.preventDefault();\n        e.stopPropagation();\n        handleEnter();\n      } else if (key === 'backspace') {\n        e.preventDefault();\n        handleBackspace();\n      } else if (/^arrow(left|right)/i.test(key)) {\n        // This will cycle through all letters with same starting pinyin letter\n        const row = board[currentStep];\n        const value = [...row.v].reverse().find((v) => v !== '');\n        if (value) {\n          const pinyinLetter = py(value)[0];\n          const possibleLetters = currentGameKeys.filter(\n            (k) => py(k)[0] === pinyinLetter\n          );\n          if (possibleLetters.length <= 1) return;\n          const letterIndex = possibleLetters.indexOf(value);\n          const nextLetter =\n            key === 'arrowright'\n              ? possibleLetters[(letterIndex + 1) % possibleLetters.length]\n              : possibleLetters[\n                  (letterIndex + possibleLetters.length - 1) %\n                    possibleLetters.length\n                ];\n          if (nextLetter) {\n            handleLetter(nextLetter, true);\n          }\n        }\n      } else {\n        // Type \"a\" will trigger the first letter pinyin that starts with \"ƒÅ\"\n        const letter = currentGameKeys.find((k) => {\n          const firstPinyinChar = py(k)[0];\n          return (\n            firstPinyinChar.localeCompare(key, 'en', {\n              sensitivity: 'base',\n            }) === 0\n          );\n        });\n        if (letter) {\n          e.preventDefault();\n          handleLetter(letter);\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKey);\n    return () => {\n      document.removeEventListener('keydown', handleKey);\n    };\n  }, [currentGameKeys, currentStep, gameState]);\n\n  const permalink = location.origin + location.pathname + '#' + currentGame.id;\n  const emojiResults = boardStates\n    .map((row) => row.join(''))\n    .join('\\n')\n    .trim();\n  const attempts = gameState === 'won' ? emojiResults.split('\\n').length : 'X';\n  const shareText = `Chengyu Wordle [${currentGame.id}] ${attempts}/6\\n\\n${emojiResults}\\n\\n${permalink}`;\n\n  return (\n    <>\n      <header>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setShowInfoModal(true);\n          }}\n        >\n          <svg\n            width=\"16\"\n            height=\"16\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <title>‚ÑπÔ∏è</title>\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            />\n          </svg>\n        </button>\n        <h1>\n          Chengyu Wordle <sup>beta</sup>\n        </h1>\n        <button\n          type=\"button\"\n          onClick={() => {\n            setShowModal(gameState || 'play');\n          }}\n        >\n          Play\n        </button>\n      </header>\n      <div id=\"board\">\n        {board.map((row, index) => {\n          return (\n            <div\n              className={`row ${\n                currentStep === index && showError ? 'error' : ''\n              } ${currentStep === index ? 'current' : ''}`}\n              key={index}\n            >\n              {row.v.map((letter, i) => (\n                <div\n                  className={`letter ${letter ?? 'lettered'} ${\n                    boardStates[index][i] ?? ''\n                  }`}\n                  key={i}\n                >\n                  <ruby>\n                    {letter || <span style={{ opacity: 0 }}>‰∏Ä</span>}\n                    <rp>(</rp>\n                    <rt>{py(letter) || <>&nbsp;</>}</rt>\n                    <rp>)</rp>\n                  </ruby>\n                </div>\n              ))}\n            </div>\n          );\n        })}\n      </div>\n      <div id=\"keyboard\">\n        <div class=\"inner\">\n          <div class=\"keys\">\n            {currentGameKeys.map((key, i) => (\n              <button\n                class={`${correctKeys.has(key) ? 'üü©' : ''} ${\n                  presentKeys.has(key) ? 'üüß' : ''\n                } ${absentKeys.has(key) ? '‚¨ú' : ''}`}\n                type=\"button\"\n                tabIndex={-1}\n                onClick={() => {\n                  handleLetter(key);\n                }}\n              >\n                <ruby>\n                  {key}\n                  <rp>(</rp>\n                  <rt>{py(key)}</rt>\n                  <rp>)</rp>\n                </ruby>\n              </button>\n            ))}\n          </div>\n          <div class=\"row\">\n            <button type=\"button\" onClick={handleEnter} tabIndex={-1}>\n              Enter\n            </button>\n            <button type=\"button\" onClick={handleBackspace} tabIndex={-1}>\n              <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n                <path d=\"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H7.07L2.4 12l4.66-7H22v14zm-11.59-2L14 13.41 17.59 17 19 15.59 15.41 12 19 8.41 17.59 7 14 10.59 10.41 7 9 8.41 12.59 12 9 15.59z\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div\n        id=\"modal\"\n        class={showModal ? 'appear' : ''}\n        onClick={(e) => {\n          if (e.target === e.currentTarget) setShowModal(null);\n        }}\n      >\n        <CloseIcon\n          height=\"24\"\n          width=\"24\"\n          class=\"close\"\n          onClick={() => {\n            setShowModal(null);\n          }}\n        />\n        <div class=\"content\">\n          <h2>\n            {showModal === 'won'\n              ? 'üéâüéâüéâ'\n              : showModal === 'lost'\n              ? 'üò≠üò≠üò≠'\n              : 'üëæüëæüëæ'}\n          </h2>\n          {showModal === 'play' && (\n            <a href={permalink}>üîó {location.host + '/#' + currentGame.id}</a>\n          )}\n          {/(won|lost)/i.test(showModal) && (\n            <>\n              <p>\n                <b class=\"answer\">\n                  <ruby>\n                    {currentGame.idiom}\n                    <rp>(</rp>\n                    <rt>{py(currentGame.idiom)}</rt>\n                    <rp>)</rp>\n                  </ruby>\n                </b>\n                <br />{' '}\n                <small>\n                  <a href={permalink}>üîó {currentGame.id}</a>\n                  &nbsp;&nbsp;\n                  <a\n                    href={`https://cc-cedict.org/editor/editor.php?handler=QueryDictionary&querydictionary_search=${currentGame.idiom}`}\n                    target=\"_blank\"\n                  >\n                    üìñ CC-CEDICT\n                  </a>\n                </small>\n              </p>\n              <div class=\"results\">{shareText}</div>\n              <button\n                id=\"share\"\n                onClick={async () => {\n                  try {\n                    await navigator.share({ text: shareText });\n                  } catch (e) {\n                    try {\n                      await navigator.clipboard.writeText(shareText);\n                      alert('Copied results to clipboard');\n                    } catch (e2) {}\n                  }\n                }}\n              >\n                Share{' '}\n                <svg height=\"16\" width=\"16\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92c0-1.61-1.31-2.92-2.92-2.92zM18 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM6 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 7.02c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"\n                  ></path>\n                </svg>\n              </button>\n            </>\n          )}\n          <p>\n            <button\n              type=\"button\"\n              onClick={() => {\n                const yes = confirm(\n                  'Are you sure you want to start a new random game?'\n                );\n                if (yes) {\n                  const rand = Math.round(Math.random() * (games.length - 1));\n                  const randGame = games[rand];\n                  location.hash = `#${randGame.id}`;\n                  setShowModal(null);\n                }\n              }}\n            >\n              <PlayIcon width={20} height={20} /> Random\n            </button>{' '}\n            <button\n              type=\"button\"\n              onClick={() => {\n                // Ask user for idiom ID, load game if ID is valid\n                const id = prompt('Enter idiom ID:');\n                if (id) {\n                  const game = games.find((g) => g.id === id);\n                  if (game) {\n                    location.hash = `#${game.id}`;\n                    setShowModal(null);\n                  } else {\n                    alert('Invalid idiom ID');\n                  }\n                }\n              }}\n            >\n              <PlayIcon width={20} height={20} /> Choose\n            </button>\n          </p>\n        </div>\n      </div>\n      <div id=\"info-modal\" class={showInfoModal ? 'appear' : ''}>\n        <CloseIcon\n          height=\"24\"\n          width=\"24\"\n          class=\"close\"\n          onClick={() => {\n            setShowInfoModal(false);\n          }}\n        />\n        <div class=\"content\">\n          <h2>How to play</h2>\n          <p>Guess the idiom in ${MAX_STEPS} tries.</p>\n          <p>\n            Each guess must be a valid 4-letter idiom. Hit the enter button to\n            submit.\n          </p>\n          <p>\n            After each guess, the color of the tiles will change to show how\n            close your guess was to the idiom.\n          </p>\n          <ul>\n            <li>üü©‚¨ú‚¨ú‚¨ú Green = correct spot</li>\n            <li>‚¨úüüß‚¨ú‚¨ú Yellow = wrong spot</li>\n            <li>\n              ‚¨ú‚¨ú<span style={{ opacity: 0.5 }}>‚¨õ</span>‚¨ú Gray = not in any\n              spot\n            </li>\n          </ul>\n          <h2>About</h2>\n          <p>\n            <a\n              href=\"https://github.com/cheeaun/chengyu-wordle/\"\n              target=\"_blank\"\n            >\n              Built\n            </a>{' '}\n            by{' '}\n            <a href=\"https://cheeaun.com\" target=\"_blank\">\n              Chee Aun\n            </a>\n            .{' '}\n            <a href=\"https://www.powerlanguage.co.uk/wordle/\" target=\"_blank\">\n              Wordle\n            </a>{' '}\n            ¬©Ô∏è{' '}\n            <a href=\"https://powerlanguage.co.uk/\" target=\"_blank\">\n              Josh Wardle\n            </a>\n            .\n          </p>\n          <h2>Feedback channels</h2>\n          <ul>\n            <li>\n              <a href=\"https://t.me/+ykuhfiImLd1kNjk1\" target=\"_blank\">\n                Telegram group\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/cheeaun/chengyu-wordle/discussions\"\n                target=\"_blank\"\n              >\n                GitHub Discussions\n              </a>\n              (for developers)\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/cheeaun/chengyu-wordle/issues\"\n                target=\"_blank\"\n              >\n                GitHub Issues\n              </a>{' '}\n              (for bugs)\n            </li>\n            <li>\n              <a href=\"https://twitter.com/cheeaun\" target=\"_blank\">\n                @cheeaun on Twitter\n              </a>\n            </li>\n            <li>\n              <a href=\"https://t.me/cheeaun\" target=\"_blank\">\n                @cheeaun on Telegram\n              </a>\n            </li>\n          </ul>\n          <h2>Debugging</h2>\n          <button\n            type=\"button\"\n            onClick={() => {\n              if (confirm('Are you sure?')) {\n                localStorage.removeItem(KEY_PREFIX + currentGame.id);\n                location.reload();\n              }\n            }}\n          >\n            Reset current idiom game\n          </button>\n          &nbsp;\n          <button\n            type=\"button\"\n            onClick={() => {\n              if (confirm('Are you sure?')) {\n                clearGames();\n                location.reload();\n              }\n            }}\n          >\n            Clear database\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { render } from 'preact'\nimport { App } from './app'\nimport './index.css'\n\nrender(<App />, document.getElementById('app'))\n"],"names":["jsxRuntime.jsx","jsxRuntime.jsxs","jsxRuntime.Fragment","py","str","pinyin","segment","group","flat","join","trim","idioms","idiomsTxt","split","games","gameIdioms","slice","map","row","id","idiom","MAX_LETTERS","MAX_KEYS","MAX_STEPS","KEY_PREFIX","window","clearGames","i","localStorage","length","key","startsWith","removeItem","allGames","Map","game","JSON","parse","getItem","set","replace","getIdiomStates","hiddenIdiom","testIdiom","letters1","letters2","lettersLength","states","Array","from","Error","correctLetterIndices","l1","l2","push","presentLetterIndices","l1Index","indexOf","includes","getBoardGameState","boardStates","some","every","s","lastRow","blankBoard","v","getIdiomsKeys","prevPassedIdioms","prevKeys","depth","passedIdioms","Set","add","keys","idiomLetters","forEach","letter","consecutiveFailures","anotherIdiom","find","has","j","size","nextIdiom","_passedIdioms","_keys","randomIdiom","Math","floor","random","gameID","g","error","possibleIdioms","keySize","PlayIcon","props","_jsxs","_jsx","CloseIcon","currentGame","setCurrentGame","useState","location","hash","addEventListener","board","setBoard","cachedGame","useMemo","setItem","stringify","gameState","currentStep","findIndex","showError","setShowError","showModal","setShowModal","showInfoModal","setShowInfoModal","currentGameKeys","sort","a","b","localeCompare","log","ANSWER","handleLetter","overwrite","newBoard","columnIndex","correctKeys","presentKeys","absentKeys","state","handleEnter","currentIdiom","valid","handleBackspace","e","preventDefault","stopPropagation","handleKey","metaKey","ctrlKey","toLowerCase","test","value","reverse","pinyinLetter","possibleLetters","filter","k","letterIndex","nextLetter","firstPinyinChar","sensitivity","removeEventListener","permalink","origin","pathname","emojiResults","attempts","shareText","index","opacity","target","currentTarget","host","navigator","share","text","clipboard","writeText","confirm","rand","round","randGame","prompt","reload","render","document","getElementById"],"mappings":"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"}